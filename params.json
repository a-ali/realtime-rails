{"name":"Realtime-rails","tagline":"","body":"# Realtime Support for Rails\r\n\r\nThis gem enables you to communicate with your rails front-end in realtime, leveraging socket.io, redis (or ZeroMQ), and node.js. Clients are authenticated via their user id plus a day-long shared session token between the servers.\r\n\r\nNote: This gem is a concept piece originally conceived ~2013 and published early ~2014. As of mid-2015, support for performant, native and scalable websockets are available in Rails. See [ActiveCable](https://github.com/rails/actioncable) - you probably don't necessarily need a pub/sub server and Node.js running anymore to achieve similar lightweight realtime bi-directional communication with a large number of connected clients to your Rails application.\r\n\r\nThis gem, and sample node.js servers were inspired by the blog post: [Liam Kaufman's _Adding Real-Time to a RESTful Rails App_](http://liamkaufman.com/blog/2013/02/27/adding-real-time-to-a-restful-rails-app/).\r\n\r\nA live demo of this in action using redis is at [Realtime-rails Demo on Heroku](http://realtime-rails-demo.herokuapp.com/). A diagram of this in action:\r\n\r\n<img src=\"http://i.imgur.com/vm8o2IF.png\" width=\"450\">\r\n\r\nA live demo of this in action using ZeroMQ is at [Realtime-rails-zmq Demo](http://zmq-server.mikeatlas.com:5000/). A diagram of this in action:\r\n\r\n<img src=\"http://i.imgur.com/7FkehSN.png\" width=\"450\">\r\n\r\nTo start, install the gem in your Gemfile:\r\n\r\n```ruby\r\ngem 'realtime'\r\n```\r\nIf you want to use redis for your realtime backend, first, install redis:\r\n\r\nFor OS X, with homebrew:\r\n```console\r\nbrew install redis\r\n```\r\nFor more information on installing redis locally on other platforms, see http://redis.io/topics/quickstart\r\n\r\nnext, include in your `Gemfile`:\r\n```ruby\r\ngem 'redis'\r\n```\r\nand then run:\r\n```console\r\nbundle install\r\n```\r\nIf you want to use embedded ZeroMQ for your realtime backend, you'll need to [install ZeroMQ](http://zeromq.org/intro:get-the-software), and then include:\r\n```ruby\r\ngem 'zmq'\r\ngem 'em-zmq'\r\n```\r\nand then run:\r\n```console\r\nbundle install\r\n```\r\n\r\nNext, you'll need to tell your `application_controller.rb` that it is sharing a realtime token with your realtime server by adding the following lines:\r\n\r\n```ruby\r\n  # app/controllers/application_controller.rb\r\n  \r\n  realtime_controller({:queue => :redis}) # instruct all requests to enable realtime support via redis\r\n  # realtime_controller({:queue => :zmq}) # instruct all requests to enable realtime support via zmq\r\n\r\n  def realtime_user_id\r\n  \treturn 42 # if using devise, change this to current_user.id\r\n  end\r\n\r\n  def realtime_server_url\r\n  \t# point this to your node.js-socket.io-redis/zmq realtime server (you can set this later)\r\n  \treturn 'http://your-realtime-server.yourdomain.com'\r\n  end\r\n```\r\n\r\nIn your `application.html.erb` file, add the following to your `<head>` element:\r\n\r\n```ruby\r\n <!-- required: realtime support framework -->\r\n <%= realtime_support %>\r\n <!-- optional: message_handler dequeues realtime messages into Backbone.js style events -->\r\n <%= realtime_message_handler %>\r\n <!-- optional: message_console_logger listens or dequeues realtime messages to the browser console -->\r\n <%= realtime_message_console_logger %>\r\n```\r\n\r\nIf using redis, tell rails about your redis instance:\r\n```ruby\r\n# config/initializers/redis.rb\r\nlocation = ENV[\"REDISCLOUD_URL\"] || 'redis://127.0.0.1:6379/0'\r\nuri = URI.parse(location)\r\n$redis = Redis.new(:host => uri.host, :port => uri.port, :password => uri.password)\r\n```\r\nIf using ZeroMQ, tell rails about the ZeroMQ endpoint:\r\n```ruby\r\n# config/initializers/zero_mq.rb\r\n$zero_mq = \"tcp://zmq-server.mikeatlas.com:5556\"\r\n```\r\n\r\nNow, you'll need to run a realtime node.js server (you can use my [sample realtime server](https://github.com/mikeatlas/realtime-server)). If you host this Node.js server on Heroku, you'll need to [enable websockets for this application](https://devcenter.heroku.com/articles/heroku-labs-websockets).\r\n\r\n```console\r\ngem install foreman\r\ngit clone git://github.com/mikeatlas/realtime-server.git\r\ncd realtime-server\r\nsudo npm install\r\nforeman start\r\n```\r\n\r\nIf you want to use the [ZeroMQ enabled realtime server](https://github.com/mikeatlas/realtime-server-zmq), you'll probably run into trouble standing it up on Heroku since the library is not installed on the Cedar stack by default, so my recommendation is to run it on an Amazon EC2 instance (be sure to open up ports 80, 5001, 5556 and 5557). You'll need to [install ZeroMQ](http://zeromq.org/area:download), and run:\r\n\r\n```console\r\ngem install foreman\r\ngit clone git://github.com/mikeatlas/realtime-server-zmq.git\r\ncd realtime-server-zmq\r\nsudo npm install\r\nforeman start\r\n```\r\nNow that you have rails running and connecting to redis/ZeroMQ, and node.js running and connecting, you should be able to try it out. Connect to your rails console `rails c` and run the following command:\r\n\r\n```ruby\r\n# if using redis:\r\n$redis.publish 'realtime_msg', {msg: 'hello world - ' + SecureRandom.hex, recipient_user_ids: [41, 42]}.to_json\r\n# if using ZeroMQ:\r\nZmqWrapper.publish({msg: 'hello world - ' + SecureRandom.hex, recipient_user_ids: [41, 42]})\r\n```\r\n\r\nIf you are user id `42` in the rails application, you should see in your browser console something like:\r\n```\r\nObject {msg: \"hello world - e008f94a8710826bad8c4f6af28be922\"}\r\n```\r\n\r\n","google":"UA-53156723-2","note":"Don't delete this file! It's used internally to help with page regeneration."}